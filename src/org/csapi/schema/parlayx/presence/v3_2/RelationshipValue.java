//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-792 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.02.26 at 11:20:45 ÉÏÎç CST 
//


package org.csapi.schema.parlayx.presence.v3_2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RelationshipValue.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RelationshipValue">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Family"/>
 *     &lt;enumeration value="Assistant"/>
 *     &lt;enumeration value="Friend"/>
 *     &lt;enumeration value="Associate"/>
 *     &lt;enumeration value="Supervisor"/>
 *     &lt;enumeration value="RelationshipNone"/>
 *     &lt;enumeration value="RelationshipOther"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RelationshipValue")
@XmlEnum
public enum RelationshipValue {

    @XmlEnumValue("Family")
    FAMILY("Family"),
    @XmlEnumValue("Assistant")
    ASSISTANT("Assistant"),
    @XmlEnumValue("Friend")
    FRIEND("Friend"),
    @XmlEnumValue("Associate")
    ASSOCIATE("Associate"),
    @XmlEnumValue("Supervisor")
    SUPERVISOR("Supervisor"),
    @XmlEnumValue("RelationshipNone")
    RELATIONSHIP_NONE("RelationshipNone"),
    @XmlEnumValue("RelationshipOther")
    RELATIONSHIP_OTHER("RelationshipOther");
    private final String value;

    RelationshipValue(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RelationshipValue fromValue(String v) {
        for (RelationshipValue c: RelationshipValue.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
